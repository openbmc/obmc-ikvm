{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08a63b04_f41a740c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "Neat -- has this been tested on non-aspeed hardware by any chance?",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 32,
        "endChar": 16
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b5e200_551bd119",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "no",
      "parentUuid": "08a63b04_f41a740c",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 32,
        "endChar": 16
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc35f744_3263fc18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "Alright -- a handful of relatively minor/superficial things, though one more structural uncertainty...",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a810dfbb_3d5bbc5c",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "Aside from the four declared in the corresponding header file, all the other functions in this file could/should be static I think?",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df481632_7d3bb084",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "sure, will do.",
      "parentUuid": "a810dfbb_3d5bbc5c",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e47775b3_3ac361ee",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T15:46:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df481632_7d3bb084",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb37bd1c_dfe0b010",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "While I suppose it\u0027d technically be a teeny tiny bit less efficient, I think it might be nice to define this in terms of `writeRawSysfsAttribute()` instead of duplicating most of it (and this shouldn\u0027t be a hot enough path that constructing a `std::string` or whatever to have a span to pass to the inner function makes any real difference).\n\nOr actually I suppose if all the sysfs files we\u0027re dealing with here are implemented properly on the kernel side it should be fine to leave off the trailing `\\n`, so it wouldn\u0027t even need to do that (though I guess you\u0027d need a `strlen()` to determine the length of the span).",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1a3c2ef_f05a3e18",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "will do.",
      "parentUuid": "bb37bd1c_dfe0b010",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bee44722_a0bf6325",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T15:46:17Z",
      "side": 1,
      "message": "turns out both const char* and std::string are implicitly convertible to std::span\u003cconst char\u003e so just the one function is needed!",
      "parentUuid": "d1a3c2ef_f05a3e18",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea4f3f3d_de09536b",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "Bit of a yoda conditional, could we flip the operands around here instead?",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 105,
        "endChar": 0
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea3eca9_1632245d",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "sure",
      "parentUuid": "ea4f3f3d_de09536b",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 105,
        "endChar": 0
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9366759a_d4a346ea",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T15:46:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ea3eca9_1632245d",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 105,
        "endChar": 0
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4455b19c_4f41b7b5",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "While we\u0027re at it reformatting this for the language switch, how about we deduplicate the comment \u0026 code and write the bytes as hex integer literals rather than quoted chars?  (`0x01` seems simpler to read/write than `\u0027\\x01\u0027`, especially if it\u0027s all just raw binary with no text.)  So something like:\n \n```\n// Binary HID keyboard descriptor\nstd::array\u003cchar, 63\u003e kbdDesc{\n  0x05, 0x01, // USAGE_PAGE (Generic Desktop)\n  0x09, 0x06, // USAGE (Keyboard)\n  0xa1, 0x01, // Collection (Application)\n  // ...etc...\n};\n```\n\nThat way if we ever have to tweak it it\u0027s much easier to do it in one place instead of two that could drift out of sync undetected.",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 177,
        "endChar": 80
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38dbd2d5_92bef22a",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "sure thing.",
      "parentUuid": "4455b19c_4f41b7b5",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 177,
        "endChar": 80
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b884457_9365794f",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T15:46:17Z",
      "side": 1,
      "message": "\u003e While we\u0027re at it reformatting this for the language switch, how about we deduplicate the comment \u0026 code\n\nI did this.\n\n\u003e and write the bytes as hex integer literals\n\nWhen I tried to do this, some of the bytes no longer fit in a (signed) char.  Should I change the array type to unsigned char?  That would then require casts back to signed char when using ofstream::write...given that is it still worth using integer literals?",
      "parentUuid": "38dbd2d5_92bef22a",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 177,
        "endChar": 80
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27fa8928_a8803f11",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-19T18:59:42Z",
      "side": 1,
      "message": "Ah, that\u0027s unfortunate, but yeah, I see the problem...\n\nAnd yes, I guess unsigned char would be slightly more appropriate for arbitrary binary data -- perhaps a reasonably clean solution would be to have a `writeSysfsAttribute()` that takes one signedness and a tiny wrapper overload that takes the other signedness and just does a trivial conversion before calling the inner one?  (And to be pedantic maybe specify `unsigned char` and `signed char` explicitly on both, since which one a plain `char` is is technically implementation-defined.)\n\nOr if that ends up being more complicated for some reason it wouldn\u0027t be the end of the world to just stick with the character literals as it is now.",
      "parentUuid": "5b884457_9365794f",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 177,
        "endChar": 80
      },
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a242bd_192ab8f0",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "And similarly here of course.",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b76988ba_48e3ff3d",
        "filename": "ikvm_gadget.cpp",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "d8a242bd_192ab8f0",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6336fced_9b226dc1",
        "filename": "ikvm_input.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T09:46:18Z",
      "side": 1,
      "message": "Hmm, does this cause any problems with multiple simultaneously-connected clients, like the second one booting the first one or effectively demoting it to view-only (by killing its keyboard/mouse) or something?",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbadbe6c_21f68901",
        "filename": "ikvm_input.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-07T12:47:36Z",
      "side": 1,
      "message": "I\u0027m new to this app so I could be wrong but I don\u0027t think so - the Input::connect/disconnect methods are only called when the connected RFB client count transitions from 0-\u003e1 and 1-\u003e0.",
      "parentUuid": "6336fced_9b226dc1",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da3fc437_9de48514",
        "filename": "ikvm_input.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-03-07T20:08:45Z",
      "side": 1,
      "message": "Ah, yes, that appears to be the case -- nevermind then, looks like it should be fine as is.",
      "parentUuid": "bbadbe6c_21f68901",
      "revId": "f0b4529ec2daedd4d8d26b955b2673af11ec106c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}